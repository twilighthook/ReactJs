//https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind
//bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列

//Example1:
var module = {
	x:404,
	getX: function(){
		return this.x;
	}
}

//此用會直接調用getX: function()，若直接使用會undefined，因為在全域中x為undefined
var unboundGetX = module.getX;
console.log(unboundedGetX); // The function gets invoked at the global scope
// expected output: undefined

//bind有點像是new的用法，只是創建的物件是var型態而不是fuction
var boundGetX = unboundGetX.bind(module); //or var boundGetX = module.getX.bind(module)
console.log(boundGetX());
// expected output: 42



//Example2:創建綁定函數
this.x = 9; 
var module = {
  x: 81,
  getX: function() { return this.x; }
};

module.getX(); // 直接使用，返回 81

var retrieveX = module.getX;
retrieveX(); // 返回 9, 在这种情况下，"this"指向全局作用域

// 创建一个新函数，将"this"绑定到module对象
// 以調用一個module為基礎的狀況下
var boundGetX = retrieveX.bind(module);
boundGetX(); // 返回 81



